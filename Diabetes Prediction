# **Importing the Dependencies**

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler   # this is used to standard the data inot same range
from sklearn.model_selection import train_test_split   # this is used to split the data into train and test data
from sklearn import svm
from sklearn.metrics import accuracy_score  # this is used to check the accuracy of the model

# **Data collection and Analysis**

PIMA diabetes Dataset - kaggle

df=pd.read_csv('/content/diabetes (1).csv')


df.head()

# number of rows and columns

df.shape

# Getting the statical forms of data
df.describe()


df.Outcome.value_counts()

0 ---> non-diabetes pateint                             

1 ---> **`diabetes`** pateint

df.groupby('Outcome').mean()  # finding the mean by group by

# **Seperating the Data and Labels**

x=df.drop(columns = 'Outcome',axis=1)
y=df.Outcome

print(x)

print(y)

# **Data Standradization**

scaler=StandardScaler()

scaler.fit(x)

strandized_data=scaler.transform(x)

print(strandized_data)  # al have came in the range of same value

x=strandized_data   #stored the data in x
y=df['Outcome']     # stored the label(columns) in y
print(x)
print(y)

Train Test Split

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)
print(x.shape,X_train.shape,X_test.shape)

# **Training the model**

classifier = svm.SVC(kernel='linear')


classifier.fit(X_train,Y_train)

# **Model Evluation**

# Accuracy Score **bold text**

# Accurcy Score in Training data

x_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(x_train_prediction,Y_train)
print("accuracy of the traning data",training_data_accuracy)

# Accurcy Score in Test data

x_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(x_test_prediction,Y_test)
print("accuracy of the test data",test_data_accuracy)

# **Making a predictive System**

input_data = (5,166,72,19,175,25.8,0.587,51)

#changing the input data int numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the data
input_reshape_data=input_data_as_numpy_array.reshape(1,-1)

# Strandize the input data
std_data=scaler.transform(input_reshape_data)
print(std_data)

# predicting the value
prediction=classifier.predict(std_data)  # classifier as traning model
print(prediction)


if(prediction[0]==0):
    print("\nThe person is non-diabetic\n")

else:
    print("\nThe person is diabetic\n")


# **Saving the Training Model**


import pickle

filename='trained_model.sav'
pickle.dump(classifier,open(filename,'wb'))


Loading the Saved file


#loading the saved model

loaded_file=pickle.load(open('trained_model.sav','rb'))

input_data = (5,166,72,19,175,25.8,0.587,51)

#changing the input data int numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the data
input_reshape_data=input_data_as_numpy_array.reshape(1,-1)

# Strandize the input data
std_data=scaler.transform(input_reshape_data)
print(std_data)

# predicting the value
prediction=loaded_file.predict(std_data)  # classifier as traning model
print(prediction)


if(prediction[0]==0):
    print("\nThe person is non-diabetic\n")
else:
    print("\nThe person is diabetic\n")
